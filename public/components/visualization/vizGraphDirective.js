// Generated by CoffeeScript 1.8.0

/*
Committee Graph directive
 */

(function() {
  var ICCVGraph,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ICCVGraph = angular.module("iccv.graph", []);

  ICCVGraph.directive("graph", [
    'userInfoService', function($http, $q, userInfoService) {
      var linker;
      linker = function(scope, element, attrs) {
        console.log("( ͡° ͜ʖ ͡  ");
        scope.activeDepartmentLabels = true;
        scope.schoolsPinned = false;
        scope.activeSchools = [];
        scope.activeDepartments = [];
        scope.expandAllSchools = false;
        scope.pinAllSchools = false;
        scope.showSettings = true;
        scope.activeCommittee = {
          id: null,
          members: [],
          departments: []
        };
        scope.$watch('workInfo', function(newval, oldval) {
          var loadGraph;
          loadGraph = function() {
            var loadedData, options;
            options = {
              container: attrs.container
            };
            loadedData = {
              workInfo: scope.workInfo,
              schools: scope.schools
            };
            scope.g = new CommitteeGraph.initialize(element[0], loadedData, options);
            if (attrs.graphtype === "explorative") {
              scope.graphType = "explorative";
            } else if (attrs.graphtype === "committee") {
              scope.graphType = "committee";
            }
            return $(element).on('mousedown', function(e) {
              var nodeClicked, oldX, oldY;
              oldX = e.pageX;
              oldY = e.pageY;
              nodeClicked = e.target.attributes.identifier;
              if (nodeClicked !== void 0) {
                return element.one('mouseup', function(e) {
                  var newX, newY;
                  newX = e.pageX;
                  newY = e.pageY;
                  if (Math.abs(oldX - newX) < 15 && Math.abs(oldY - newY) < 15) {
                    return scope.nodeClicked(e);
                  }
                });
              }
            });
          };
          if (newval !== void 0) {
            return loadGraph();
          }
        });

        /*
        @Description: Switch Graph between the committee view and the explorative view.
        To switch graphs, alter the graphType attribute
         */
        scope.changeGraphView = function() {
          var setGraphType, toCommitteeGraph, toExplorativeGraph;
          setGraphType = function(type) {
            attrs.graphtype = type;
            scope.graphType = type;
            return scope.toggleSchools(false);
          };
          toCommitteeGraph = function() {
            return setGraphType("committee");
          };
          toExplorativeGraph = function() {
            setGraphType("explorative");
            return scope.activeCommittee = {
              id: null,
              members: [],
              departments: []
            };
          };
          if (attrs.graphtype === "explorative") {
            return toCommitteeGraph();
          } else if (attrs.graphtype === "committee") {
            return toExplorativeGraph();
          }
        };

        /*
        @Description: Search through each school in the schools scope. Check to see if the departments are expanded in the school.
                      If expanding is true: If the school is already expanded, skip it, else expand it
                      If expanding is false: If the school is expanded, collapse it, else, skip it.
        @Parameters: [boolean] expand
        @Complexity: O(n) with n being the number of schools
         */
        scope.toggleSchools = function(expand) {
          var department, pinOptions, properties, school, _ref, _results;
          pinOptions = {
            autoHideDelay: 1000,
            className: "success",
            showAnimation: "fadeIn",
            hideAnimation: "fadeOut"
          };
          if (expand === true) {
            $.notify("Schools Expanded", pinOptions);
          } else {
            $.notify("Schools Collapsed", pinOptions);
          }
          _ref = scope.schools;
          _results = [];
          for (school in _ref) {
            properties = _ref[school];
            if (expand === true && scope.isSchoolActive(school) !== true) {
              _results.push(scope.schoolClicked(school));
            } else if (expand !== true && scope.isSchoolActive(school) === true) {
              scope.schoolClicked(school);
              if (scope.activeCommittee.id !== null) {
                _results.push((function() {
                  var _i, _len, _ref1, _results1;
                  _ref1 = scope.activeCommittee.departments;
                  _results1 = [];
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    department = _ref1[_i];
                    if (scope.isDepartmentActive(department) !== true) {
                      _results1.push(scope.departmentClicked(department));
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                })());
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        /*
        @Description: Search through each school in the schools scope. Pin each school.
                      NOTE: Users don't have the ability to pin individual nodes. If implemented in the future, this
                      method should be adapted to allow for individual pinning or pinning lists of nodes.
        @Complexity: O(n) with n being the number of schools
         */
        scope.pinSchools = function(pin) {
          var pinOptions, properties, school, _ref, _results;
          pinOptions = {
            autoHideDelay: 1000,
            className: "success",
            showAnimation: "fadeIn",
            hideAnimation: "fadeOut"
          };
          if (pin === true) {
            $.notify("Schools Pinned", pinOptions);
          } else {
            $.notify("Schools Un-pinned", pinOptions);
          }
          _ref = scope.schools;
          _results = [];
          for (school in _ref) {
            properties = _ref[school];
            _results.push(scope.g.pinNode(school));
          }
          return _results;
        };
        scope.toggleSettings = function(show) {
          return scope.showSettings = show;
        };
        scope.committeeClicked = function(committee) {
          var department, info, location, name, position, properties, school, workLocations, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
          if (scope.activeCommittee.id !== null) {
            scope.updateGraph({
              type: "committee_links",
              members: scope.activeCommittee.members
            }, false);
          }
          scope.activeCommittee.members = [];
          scope.activeCommittee.departments = [];
          scope.activeCommittee.id = committee.committee_name;
          _ref = scope.committees[committee.id].people;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            scope.activeCommittee.members.push(name);
            workLocations = scope.workInfo[name].locations;
            for (location in workLocations) {
              position = workLocations[location];
              if (location.indexOf("School") === -1 && scope.isFoundIn(location, scope.activeCommittee.departments) !== true) {
                scope.activeCommittee.departments.push(location);
              }
            }
          }
          _ref1 = scope.schools;
          for (school in _ref1) {
            properties = _ref1[school];
            _ref2 = properties.standardizedDepartments;
            for (department in _ref2) {
              info = _ref2[department];
              if (scope.isDepartmentActive(department) === true) {
                scope.departmentClicked(department);
              }
            }
          }
          _ref3 = scope.committees[committee.id].people;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            name = _ref3[_j];
            workLocations = scope.workInfo[name].locations;
            for (location in workLocations) {
              position = workLocations[location];
              if (location.indexOf("School") === -1) {
                if (scope.isDepartmentActive(location) === false) {
                  scope.departmentClicked(location);
                }
              }
            }
          }
          scope.updateGraph({
            type: "committee_links",
            members: scope.activeCommittee.members
          }, true);
        };
        scope.nodeClicked = function(e) {
          var departmentName, node, nodeId, nodeType, properties, _ref, _results;
          nodeType = e.target.className.baseVal;
          node = e.target.attributes.identifier;
          if (node !== void 0) {
            nodeId = node.value;
            if (nodeType === "department_node" || nodeType === "department_node_label") {
              return scope.departmentClicked(nodeId);
            } else if (nodeType === "school_node" || nodeType === "school_node_label") {
              scope.schoolClicked(nodeId);
              if (e.shiftKey === true && scope.isSchoolActive(nodeId)) {
                _ref = scope.schools[nodeId].standardizedDepartments;
                _results = [];
                for (departmentName in _ref) {
                  properties = _ref[departmentName];
                  _results.push(scope.departmentClicked(departmentName));
                }
                return _results;
              }
            } else if (nodeType === "user_node" || nodeType === "user_node_label") {
              return scope.userClicked(nodeId);
            }
          }
        };
        scope.schoolClicked = function(school) {
          var addDepartments, selectedSchool;
          addDepartments = scope.isSchoolActive(school);
          scope.updateActiveSchools(school);
          selectedSchool = scope.schools[school];
          return scope.updateGraph(selectedSchool, !addDepartments);
        };
        scope.departmentClicked = function(department) {
          var addPeople, getLinkedSchool, linkedSchool, selectedDepartment, setCommitteeUserProperties, setExplorativeUserProperties;
          setExplorativeUserProperties = function() {
            var locs, properties, username, _ref, _results;
            _ref = selectedDepartment.standardizedUsers;
            _results = [];
            for (username in _ref) {
              properties = _ref[username];
              locs = Object.keys(scope.workInfo[username].locations);
              if (locs.length > 2) {
                _results.push(properties.fill = "orange");
              } else if (locs.length === 2) {
                if (locs[0].indexOf("School") === -1 && locs[1].indexOf("School") === -1) {
                  _results.push(properties.fill = "orange");
                } else {
                  _results.push(properties.fill = "#4568A3");
                }
              } else {
                _results.push(properties.fill = "#4568A3");
              }
            }
            return _results;
          };
          setCommitteeUserProperties = function() {
            var location, position, properties, username, _ref, _results;
            _ref = selectedDepartment.standardizedUsers;
            _results = [];
            for (username in _ref) {
              properties = _ref[username];
              _results.push((function() {
                var _ref1, _results1;
                _ref1 = scope.workInfo[username].locations;
                _results1 = [];
                for (location in _ref1) {
                  position = _ref1[location];
                  if (scope.isFoundIn(username, scope.activeCommittee.members)) {
                    _results1.push(properties.fill = "orange");
                  } else if (scope.isFoundIn(location, scope.activeCommittee.departments)) {
                    _results1.push(properties.fill = "#124654");
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              })());
            }
            return _results;
          };
          getLinkedSchool = (function(_this) {
            return function() {
              var d, school, schoolProperties, _i, _len, _ref, _ref1;
              _ref = scope.schools;
              for (school in _ref) {
                schoolProperties = _ref[school];
                _ref1 = schoolProperties.departments;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  d = _ref1[_i];
                  if (d === department) {
                    return school;
                  }
                }
              }
            };
          })(this);
          linkedSchool = getLinkedSchool();
          addPeople = !scope.isDepartmentActive(department);
          if (addPeople === true && scope.isSchoolActive(linkedSchool) === false) {
            scope.schoolClicked(linkedSchool);
          }
          if (addPeople === false) {
            scope.activeDepartments.splice(scope.activeDepartments.indexOf(department), 1);
          } else {
            scope.activeDepartments.push(department);
          }
          selectedDepartment = scope.schools[linkedSchool].standardizedDepartments[department];
          if (scope.graphType === "explorative") {
            setExplorativeUserProperties();
          } else if (scope.graphType === "committee") {
            setCommitteeUserProperties();
          }
          return scope.updateGraph(selectedDepartment, addPeople);
        };
        scope.userClicked = function(user) {
          var location, locationIsSchool, position, schoolsArray, _ref, _results;
          locationIsSchool = function() {
            return schoolsArray.indexOf(location) !== -1;
          };
          schoolsArray = Object.keys(scope.schools);
          _ref = scope.workInfo[user].locations;
          _results = [];
          for (location in _ref) {
            position = _ref[location];
            if (locationIsSchool()) {
              if (scope.isSchoolActive(location) !== true) {
                _results.push(scope.schoolClicked(location));
              } else {
                _results.push(void 0);
              }
            } else if (scope.isDepartmentActive(location) !== true) {
              _results.push(scope.departmentClicked(location));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        /*
        @Description: Helper Method which searches through a given array for a term. Returns -1 if the term doesnt exist
                      Returns the index of the term if it does exist.
        @Parameters: [any] term
                     [Array] array
        @Returns: [Int] index of term
         */
        scope.isFoundIn = function(term, array) {
          return array.indexOf(term) !== -1;
        };

        /*
        Description: We do not know or need to know whether the location is a department or school,
         only whether or not the current location is active
        Input: [String] location - location name
         */
        scope.isLocationActive = function(location) {
          return scope.isSchoolActive(location) || scope.isDepartmentActive(location);
        };

        /*
        @Description: Checking to see if a specific school is active
        @Parameters : [String] school : name of the school
        @Complexity : O(n) with n being the number of schools in activeSchools
         */
        scope.isSchoolActive = function(school) {
          return __indexOf.call(scope.activeSchools, school) >= 0;
        };

        /*
        @Description: Checking to see if department is active
        @Parameters : [String] school : name of the department
        @Complexity : O(n) with n being the number of departments in activeDepartments
         */
        scope.isDepartmentActive = function(department) {
          return __indexOf.call(scope.activeDepartments, department) >= 0;
        };
        scope.updateActiveSchools = function(school) {
          var dep, _i, _len, _ref, _results;
          if (__indexOf.call(scope.activeSchools, school) >= 0) {
            scope.activeSchools.splice(scope.activeSchools.indexOf(school), 1);
            _ref = scope.schools[school].departments;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              dep = _ref[_i];
              if (scope.isDepartmentActive(dep) === true) {
                _results.push(scope.departmentClicked(dep));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            return scope.activeSchools.push(school);
          }
        };
        scope.updateGraph = function(nodes, add) {
          return scope.g.updateGraph(nodes, add);
        };

        /*
        @Description: Shows/Hides Department labels within the graph
        TODO: Needs to be implemented
         */
        return scope.toggleDepartmentLabels = function() {
          return $scope.activeDepartmentLabels = !$scope.activeDepartmentLabels;
        };
      };
      return {
        restrict: "E",
        controller: 'graphCtrl',
        controllerAs: 'graphCtrl',
        templateUrl: "components/visualization/viz_graph.html",
        link: linker,
        replace: true
      };
    }
  ]).controller('graphCtrl', function($scope, userInfoService) {
    var gCtrl;
    gCtrl = this;
    gCtrl.userInfoService = userInfoService;
    return gCtrl.userInfoService.getWorkInfo().then(function(data) {
      $scope.workInfo = data.workInfo;
      $scope.schools = data.schools;
      return $scope.committees = data.committees;
    });
  });

}).call(this);

//# sourceMappingURL=vizGraphDirective.js.map
