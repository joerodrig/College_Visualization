{
  "name": "ngraph.physics.simulator",
  "version": "0.0.9",
  "description": "Physics library for ngraph",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "keywords": [
    "ngraph"
  ],
  "author": {
    "name": "Andrei Kashcha"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/anvaka/ngraph.physics.simulator"
  },
  "dependencies": {
    "ngraph.physics.primitives": "0.0.7",
    "ngraph.quadtreebh": "0.0.2",
    "ngraph.random": "0.0.1",
    "ngraph.merge": "0.0.1",
    "ngraph.expose": "0.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.6"
  },
  "readme": "# Physics for ngraph\n\nThis is a physics module for [ngraph](https://github.com/anvaka/ngraph). Its primary focus is to serve force based graph layout, thus it manages a na√Øve system of bodies and springs. \n\nSimulator calculates forces acting on each body and then deduces their position via Newton's law. There are three major forces in the system:\n\n1. Spring force keeps connected nodes together via [Hooke's law](http://en.wikipedia.org/wiki/Hooke's_law)\n2. Each body repels each other via [Coulomb's law](http://en.wikipedia.org/wiki/Coulomb's_law)\n3. To guarantee we get to \"stable\" layout system has kind of a drag force which slows entire simulation down.\n\nBody forces are calculated in `n*lg(n)` time with help of Barnes-Hut algorithm implemented in [quadtree module](https://github.com/anvaka/ngraph.quadtreebh). [Euler method](http://en.wikipedia.org/wiki/Euler_method) is then used to solve ordinary differential equation of Newton's law and get position of bodies.\n\n[![build status](https://secure.travis-ci.org/anvaka/ngraph.physics.simulator.png)](http://travis-ci.org/anvaka/ngraph.physics.simulator)\n\n# quickstart\n\n``` js\nvar physics = require('ngraph.physics.primitives');\nvar body1 = new physics.Body(0, 0);\nvar body2 = new physics.Body(1, 0);\n\nvar simulator = require('ngraph.physics.simulator');\nsimulator.addBody(body1);\nsimulator.addBody(body2);\n\nsimulator.step();\n```\n\nThis will move apart two bodies.\n\nFor more advanced use cases, please look inside `index.js`, which includes documentation for public API and describes engine configuration properties.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install ngraph.physics.simulator\n```\n\n# todo\n\nI spent countless hours trying to optimize performance of this module but it's not perfect. Ideally I'd love to use native arrays to simulate physics. Eventually this will allow to calculate forces on video card or via webworkers.\n\n# license\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/anvaka/ngraph.physics.simulator/issues"
  },
  "homepage": "https://github.com/anvaka/ngraph.physics.simulator",
  "_id": "ngraph.physics.simulator@0.0.9",
  "_from": "ngraph.physics.simulator@0.0.9"
}
