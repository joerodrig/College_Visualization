// Generated by CoffeeScript 1.8.0

/**
@ngdoc controller
@name ICCV.controller:ICCVCtrl

@description


@requires $scope
 */

(function() {
  var ICCVApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ICCVApp = angular.module("ICCV", ["extra_information"]);

  ICCVApp.controller("ICCVCtrl", [
    "$scope", "$http", function($scope, $http) {
      $scope.activeGroupName;
      $scope.activeSchools = [];
      $scope.activeDepartments = [];
      $scope.showExtraInfo = false;
      $scope.positionCount = [];
      $scope.departmentCount = [];
      $scope.committees = [
        {
          id: "C1",
          committee_name: "Committee One",
          people: ["cmckenzie"]
        }, {
          id: "C3",
          committee_name: "CS Committee",
          people: ["aerkan", "dturnbull", "barr", "nprestopnik", "pdickson", "tdragon"]
        }, {
          id: "C4",
          committee_name: "Another Committee",
          people: ["jhilton", "euell", "ebleicher", "ppospisil"]
        }
      ];
      $scope.workInfo = $http.get("json/work_info.json").success(function(data, status, headers, config) {
        $scope.workInfo = data;
      });
      return $scope.schools = $http.get("json/schools_departments.json").success(function(data, status, headers, config) {
        $scope.schools = data;
      });
    }
  ]);


  /**
  Committee Graph directive
   */

  ICCVApp.directive("graph", function($http, $q) {
    var linker;
    linker = function(scope, element, attrs) {
      var TEI, updateCounts;
      $q.all([scope.workInfo, scope.schools]).then(function() {
        var dep2SchoolMap, loadedData, options, schools;
        console.log("Graph Dependencies Loaded");
        dep2SchoolMap = (function(_this) {
          return function() {
            var department, linkedMap, school, schoolInfo, _i, _len, _ref, _ref1;
            linkedMap = {};
            _ref = scope.schools;
            for (school in _ref) {
              schoolInfo = _ref[school];
              _ref1 = schoolInfo.departments;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                department = _ref1[_i];
                linkedMap[department] = school;
              }
            }
            return linkedMap;
          };
        })(this);
        schools = (function(_this) {
          return function() {
            var school, schoolHolder, schoolInfo, _ref;
            schoolHolder = [];
            _ref = scope.schools;
            for (school in _ref) {
              schoolInfo = _ref[school];
              schoolHolder.push({
                name: school,
                short_name: schoolInfo.short_name,
                type: "school"
              });
            }
            return schoolHolder;
          };
        })(this);
        options = {
          container: attrs.container
        };
        loadedData = {
          workInfo: scope.workInfo,
          schools: schools(),
          schoolLinker: dep2SchoolMap(),
          schoolClicked: scope.schoolClicked,
          departmentClicked: scope.departmentClicked
        };
        scope.g = new CommitteeGraph.initialize(element[0], loadedData, options);
      });
      scope.toggleExtraInfo = TEI = function(show) {
        scope.showExtraInfo = show;
      };
      scope.committeeClicked = function(committee) {
        var membersInfo;
        scope.setActiveGroup(committee.committee_name);
        membersInfo = [];
        $.each(committee.people, function(key, name) {
          return membersInfo.push({
            name: name,
            workInfo: scope.workInfo[name]
          });
        });
        scope.loadMembers(membersInfo);
        scope.updateCounts(membersInfo);
      };
      scope.schoolClicked = function(school) {
        var addDepartments, associatedDepartments, department, selectedSchool, _i, _j, _len, _len1, _ref, _ref1;
        associatedDepartments = [];
        if (__indexOf.call(scope.activeSchools, school) >= 0) {
          scope.activeSchools.splice(scope.activeSchools.indexOf(school), 1);
          _ref = scope.schools[school].departments;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            department = _ref[_i];
            if (scope.activeDepartments.indexOf(department) !== -1) {
              scope.departmentClicked(department.id);
            }
          }
          addDepartments = false;
        } else {
          scope.activeSchools.push(school);
          addDepartments = true;
        }
        _ref1 = scope.schools[school].departments;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          department = _ref1[_j];
          associatedDepartments.push({
            id: department,
            type: "department"
          });
        }
        selectedSchool = [
          {
            id: school,
            type: "school",
            short_name: scope.schools[school],
            associatedDepartments: associatedDepartments
          }
        ];
        return scope.updateGraph(selectedSchool, addDepartments);
      };
      scope.departmentClicked = function(department) {
        var addPeople, key, people, person, userWorkInfo, work, _ref;
        people = [];
        _ref = scope.workInfo;
        for (person in _ref) {
          userWorkInfo = _ref[person];
          for (key in userWorkInfo) {
            work = userWorkInfo[key];
            if (work.location === department) {
              people.push({
                id: person,
                type: "user",
                workInfo: userWorkInfo,
                associatedDepartment: department
              });
            }
          }
        }
        addPeople = __indexOf.call(scope.activeDepartments, department) >= 0;
        if (addPeople) {
          scope.activeDepartments.splice(scope.activeDepartments.indexOf(department), 1);
        } else {
          scope.activeDepartments.push(department);
        }
        return scope.updateGraph(people, !addPeople);
      };
      scope.updateGraph = function(nodes, add) {
        scope.g.updateGraph(nodes, add);
      };
      scope.updateCounts = updateCounts = function(membersInfo) {
        scope.positionCount = [];
        scope.departmentCount = [];
        $.each(membersInfo, function(key, user) {
          $.each(user.workInfo, function(key, workInfo) {
            var i, j;
            if (scope.positionCount.length === 0) {
              scope.positionCount.push({
                position: workInfo.position,
                count: 1
              });
            }
            if (scope.departmentCount.length === 0) {
              scope.departmentCount.push({
                department: workInfo.location,
                count: 1
              });
            }
            i = 0;
            while (i < scope.positionCount.length) {
              if (scope.positionCount[i].position === workInfo.position) {
                scope.positionCount[i].count++;
                break;
              } else if (i === scope.positionCount.length - 1) {
                scope.positionCount.push({
                  position: workInfo.position,
                  count: 1
                });
                break;
              }
              i++;
            }
            j = 0;
            while (j < scope.departmentCount.length) {
              if (scope.departmentCount[j].department === workInfo.location) {
                scope.departmentCount[j].count++;
                break;
              } else if (j === scope.departmentCount.length - 1) {
                scope.departmentCount.push({
                  department: workInfo.location,
                  count: 1
                });
                break;
              }
              j++;
            }
          });
        });
      };
      scope.setActiveGroup = function(name) {
        scope.activeGroupName = name;
      };
    };
    $("g").click(function() {
      console.log("School node clicked!");
    });
    return {
      restrict: "E",
      replace: true,
      templateUrl: "partials/graph.html",
      link: linker
    };
  });

  angular.module("extra_information", []).directive("extraInformation", function() {
    return {
      restrict: "E",
      templateUrl: "partials/extra_info.html",
      replace: true
    };
  });

}).call(this);

//# sourceMappingURL=ICCVCtrl.js.map
