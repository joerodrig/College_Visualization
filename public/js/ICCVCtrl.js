// Generated by CoffeeScript 1.8.0

/**
@ngdoc controller
@name ICCV.controller:ICCVCtrl

@description ICCVApp loads and manages all graph dependencies. When all dependencies are loaded, a graph instance is created
  on the screen.

@Author Joseph Rodriguez
 */

(function() {
  var ICCVApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ICCVApp = angular.module("ICCV", ['ngAnimate']);


  /*
  The useInfoService asynchronously loads and formats all of the initial workInfo and school data
  @requires $http,$q
   */

  ICCVApp.service('userInfoService', function($http, $q) {

    /*
    Loads and formats all dependencies to be used
    Returns [Object]
     */
    var getWorkInfo, loadCanonical, loadCommittees, loadSchools, loadWorkInfo;
    getWorkInfo = function() {
      var canonical, committees, fixWorkInfo, mapUsersToSchool, processSchools, schools, workInfo;
      workInfo = loadWorkInfo().then(function(workData) {
        return workInfo = workData;
      });
      canonical = loadCanonical().then(function(canonicalData) {
        return canonical = canonicalData;
      });
      schools = loadSchools().then(function(schoolData) {
        return schools = schoolData;
      });
      committees = loadCommittees().then(function(committeeData) {
        return committees = committeeData;
      });
      return $q.all([canonical, workInfo, schools, committees]).then(function() {
        console.log("Dependencies loaded");
        fixWorkInfo();
        mapUsersToSchool();
        processSchools();
        return {
          workInfo: workInfo,
          schools: schools,
          committees: committees
        };
      }, fixWorkInfo = function() {
        var job, jobNameFix, jobNameIssue, username, workInf, _results;
        _results = [];
        for (username in workInfo) {
          workInf = workInfo[username];
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = workInf.length; _i < _len; _i++) {
              job = workInf[_i];
              _results1.push((function() {
                var _results2;
                _results2 = [];
                for (jobNameIssue in canonical) {
                  jobNameFix = canonical[jobNameIssue];
                  if (jobNameIssue === job.location) {
                    _results2.push(job.location = jobNameFix);
                  } else {
                    _results2.push(void 0);
                  }
                }
                return _results2;
              })());
            }
            return _results1;
          })());
        }
        return _results;
      }, mapUsersToSchool = function() {
        var inAdministration, key, school, schoolInfo, username, work, workInf, _results;
        inAdministration = function(position) {
          return position.indexOf("Dean") !== -1 || position.indexOf("Provost") !== -1 || position.indexOf("President") !== -1;
        };
        _results = [];
        for (username in workInfo) {
          work = workInfo[username];
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (key in work) {
              workInf = work[key];
              _results1.push((function() {
                var _results2;
                _results2 = [];
                for (school in schools) {
                  schoolInfo = schools[school];
                  if (school === workInf.location) {
                    if (inAdministration(workInf.position)) {
                      _results2.push(workInf.location = school + "Administration");
                    } else if (work.length === 1) {
                      _results2.push(workInf.position = school + "Other");
                    } else {
                      _results2.push(void 0);
                    }
                  } else {
                    _results2.push(void 0);
                  }
                }
                return _results2;
              })());
            }
            return _results1;
          })());
        }
        return _results;
      }, processSchools = function() {
        var department, key, school, schoolInfo, username, usersToDepartment, work, workInf, _i, _len, _ref;
        usersToDepartment = function(department) {
          var job, standardizedUsers, username, workInf, _results;
          department.standardizedUsers = {};
          standardizedUsers = department.standardizedUsers;
          _results = [];
          for (username in workInfo) {
            workInf = workInfo[username];
            workInfo[username].locations = {};
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = workInf.length; _i < _len; _i++) {
                job = workInf[_i];
                workInfo[username].locations[job.location] = job.position;
                if (job.location === department.id) {
                  _results1.push(standardizedUsers[username] = {
                    id: username,
                    type: "user",
                    size: "20",
                    textSize: "16px",
                    fill: "#4568A3"
                  });
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        };
        for (school in schools) {
          schoolInfo = schools[school];
          schools[school].id = school;
          schools[school].type = "school";
          schools[school].fill = "#076DA4";
          schoolInfo.standardizedDepartments = {};
          schoolInfo.standardizedUsers = {};
          _ref = schoolInfo.departments;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            department = _ref[_i];
            schoolInfo.standardizedDepartments[department] = {
              id: department,
              type: "department",
              fill: "#6A93A9",
              textSize: "20px"
            };
            usersToDepartment(schoolInfo.standardizedDepartments[department]);
            schoolInfo.standardizedDepartments[department].size = Object.keys(schoolInfo.standardizedDepartments[department].standardizedUsers).length;
            if (schoolInfo.standardizedDepartments[department].size < 12) {
              schoolInfo.standardizedDepartments[department].size = 12;
            }
          }
          for (username in workInfo) {
            work = workInfo[username];
            if (work.length === 1) {
              for (key in work) {
                workInf = work[key];
                if (school === workInf.location) {
                  schoolInfo.standardizedUsers[username] = {
                    id: username,
                    type: "user",
                    size: "8",
                    fill: "#000"
                  };
                }
              }
            }
          }
        }
      });
    };

    /*
    Load and cache work info
     */
    loadWorkInfo = function() {
      var defer;
      defer = $q.defer();
      $http.get("json/work_info.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache committee relationships
     */
    loadCommittees = function() {
      var defer;
      defer = $q.defer();
      $http.get("json/committees.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache schools
     */
    loadSchools = function() {
      var defer;
      defer = $q.defer();
      $http.get("json/schools_departments.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache canonical data
     */
    loadCanonical = function() {
      var defer;
      defer = $q.defer();
      $http.get("json/canonical.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };
    return {
      getWorkInfo: getWorkInfo,
      getSchools: loadSchools
    };
  });


  /**
  Committee Graph directive
   */

  ICCVApp.directive("graph", [
    'userInfoService', function($http, $q, userInfoService) {
      var linker;
      linker = function(scope, element, attrs) {
        console.log("( ͡° ͜ʖ ͡  ");
        scope.expandAllSchools = false;
        scope.pinAllSchools = false;
        scope.showSettings = true;
        scope.activeCommittee = {
          id: null,
          members: [],
          departments: []
        };
        scope.$watch('workInfo', function(newval, oldval) {
          var loadGraph;
          loadGraph = function() {
            var loadedData, options;
            options = {
              container: attrs.container
            };
            loadedData = {
              workInfo: scope.workInfo,
              schools: scope.schools
            };
            scope.g = new CommitteeGraph.initialize(element[0], loadedData, options);
            if (attrs.graphtype === "explorative") {
              scope.graphType = "explorative";
              scope.committeeBarExists = false;
            } else if (attrs.graphtype === "committee") {
              scope.graphType = "committee";
              scope.committeeBarExists = true;
            }
            return $(element).on('mousedown', function(e) {
              var nodeClicked, oldX, oldY;
              oldX = e.pageX;
              oldY = e.pageY;
              nodeClicked = e.target.attributes.identifier;
              if (nodeClicked !== void 0) {
                return element.one('mouseup', function(e) {
                  var newX, newY;
                  newX = e.pageX;
                  newY = e.pageY;
                  if (Math.abs(oldX - newX) < 15 && Math.abs(oldY - newY) < 15) {
                    return scope.nodeClicked(e);
                  }
                });
              }
            });
          };
          if (newval !== void 0) {
            return loadGraph();
          }
        });
        scope.toggleCommitteeBar = function(exists) {
          return scope.committeeBarExists = exists;
        };
        scope.changeGraphView = function() {
          var toCommitteeGraph, toExplorativeGraph;
          toCommitteeGraph = function() {
            attrs.graphtype = "committee";
            scope.graphType = "committee";
            scope.toggleCommitteeBar(true);
            return scope.toggleSchools(false);
          };
          toExplorativeGraph = function() {
            var department, _i, _len, _ref, _results;
            scope.toggleCommitteeBar(false);
            scope.graphType = "explorative";
            attrs.graphtype = "explorative";
            scope.activeCommittee = {
              id: null,
              members: [],
              departments: []
            };
            scope.toggleSchools(false);
            _ref = scope.activeCommittee.departments;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              department = _ref[_i];
              _results.push(scope.departmentClicked(department));
            }
            return _results;
          };
          if (attrs.graphtype === "explorative") {
            return toCommitteeGraph();
          } else if (attrs.graphtype === "committee") {
            return toExplorativeGraph();
          }
        };
        scope.nodeClicked = function(e) {
          var node, nodeId, nodeType;
          nodeType = e.target.className.baseVal;
          node = e.target.attributes.identifier;
          if (node !== void 0) {
            nodeId = node.value;
            if (nodeType === "department_node" || nodeType === "department_node_label") {
              return scope.departmentClicked(nodeId);
            } else if (nodeType === "school_node" || nodeType === "school_node_label") {
              return scope.schoolClicked(nodeId);
            } else if (nodeType === "user_node" || nodeType === "user_node_label") {
              return scope.userClicked(nodeId);
            }
          }
        };
        scope.toggleSchools = function(expand) {
          var department, properties, school, _ref, _results;
          _ref = scope.schools;
          _results = [];
          for (school in _ref) {
            properties = _ref[school];
            if (expand === true && scope.isSchoolActive(school) !== true) {
              _results.push(scope.schoolClicked(school));
            } else if (expand !== true && scope.isSchoolActive(school) === true) {
              scope.schoolClicked(school);
              if (scope.activeCommittee.id !== null) {
                _results.push((function() {
                  var _i, _len, _ref1, _results1;
                  _ref1 = scope.activeCommittee.departments;
                  _results1 = [];
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    department = _ref1[_i];
                    if (scope.isDepartmentActive(department) !== true) {
                      _results1.push(scope.departmentClicked(department));
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                })());
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        scope.pinSchools = function(pin) {
          var properties, school, _ref, _results;
          _ref = scope.schools;
          _results = [];
          for (school in _ref) {
            properties = _ref[school];
            _results.push(scope.g.pinNode(school));
          }
          return _results;
        };
        scope.toggleSettings = function(show) {
          scope.showSettings = show;
        };
        scope.committeeClicked = function(committee) {
          var department, info, location, name, position, properties, school, workLocations, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
          if (scope.activeCommittee.id !== null) {
            scope.updateGraph({
              type: "committee_links",
              members: scope.activeCommittee.members
            }, false);
          }
          scope.activeCommittee.members = [];
          scope.activeCommittee.departments = [];
          scope.activeCommittee.id = committee.committee_name;
          _ref = scope.committees[committee.id].people;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            scope.activeCommittee.members.push(name);
            workLocations = scope.workInfo[name].locations;
            for (location in workLocations) {
              position = workLocations[location];
              if (location.indexOf("School") === -1 && scope.isFoundIn(location, scope.activeCommittee.departments) !== true) {
                scope.activeCommittee.departments.push(location);
              }
            }
          }
          _ref1 = scope.schools;
          for (school in _ref1) {
            properties = _ref1[school];
            _ref2 = properties.standardizedDepartments;
            for (department in _ref2) {
              info = _ref2[department];
              if (scope.isDepartmentActive(department) === true) {
                scope.departmentClicked(department);
              }
            }
          }
          _ref3 = scope.committees[committee.id].people;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            name = _ref3[_j];
            workLocations = scope.workInfo[name].locations;
            for (location in workLocations) {
              position = workLocations[location];
              if (location.indexOf("School") === -1) {
                if (scope.isDepartmentActive(location) === false) {
                  scope.departmentClicked(location);
                }
              }
            }
          }
          scope.updateGraph({
            type: "committee_links",
            members: scope.activeCommittee.members
          }, true);
        };
        scope.isFoundIn = function(term, array) {
          return array.indexOf(term) !== -1;
        };
        scope.schoolClicked = function(school) {
          var addDepartments, selectedSchool;
          addDepartments = scope.isSchoolActive(school);
          scope.updateActiveSchools(school);
          selectedSchool = scope.schools[school];
          return scope.updateGraph(selectedSchool, !addDepartments);
        };
        scope.departmentClicked = function(department) {
          var addPeople, getLinkedSchool, linkedSchool, location, locs, position, properties, selectedDepartment, username, _ref, _ref1, _ref2;
          getLinkedSchool = (function(_this) {
            return function() {
              var d, school, schoolProperties, _i, _len, _ref, _ref1;
              _ref = scope.schools;
              for (school in _ref) {
                schoolProperties = _ref[school];
                _ref1 = schoolProperties.departments;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  d = _ref1[_i];
                  if (d === department) {
                    return school;
                  }
                }
              }
            };
          })(this);
          linkedSchool = getLinkedSchool();
          addPeople = !scope.isDepartmentActive(department);
          if (addPeople === true && scope.isSchoolActive(linkedSchool) === false) {
            scope.schoolClicked(linkedSchool);
          }
          if (addPeople === false) {
            scope.activeDepartments.splice(scope.activeDepartments.indexOf(department), 1);
          } else {
            scope.activeDepartments.push(department);
          }
          selectedDepartment = scope.schools[linkedSchool].standardizedDepartments[department];
          if (scope.graphType === "explorative") {
            _ref = selectedDepartment.standardizedUsers;
            for (username in _ref) {
              properties = _ref[username];
              locs = Object.keys(scope.workInfo[username].locations);
              if (locs.length > 2) {
                properties.fill = "orange";
              } else if (locs.length === 2) {
                if (locs[0].indexOf("School") !== -1 && locs[1].indexOf("School") !== -1) {
                  properties.fill = "yellow";
                } else {
                  properties.fill = "#4568A3";
                }
              } else {
                properties.fill = "#4568A3";
              }
            }
          } else if (scope.graphType === "committee") {
            _ref1 = selectedDepartment.standardizedUsers;
            for (username in _ref1) {
              properties = _ref1[username];
              _ref2 = scope.workInfo[username].locations;
              for (location in _ref2) {
                position = _ref2[location];
                if (scope.isFoundIn(username, scope.activeCommittee.members)) {
                  properties.fill = "orange";
                } else if (scope.isFoundIn(location, scope.activeCommittee.departments)) {
                  properties.fill = "#124654";
                }
              }
            }
          }
          return scope.updateGraph(selectedDepartment, addPeople);
        };
        scope.userClicked = function(user) {
          var location, locationIsSchool, position, schoolsArray, _ref, _results;
          locationIsSchool = function() {
            return schoolsArray.indexOf(location) !== -1;
          };
          schoolsArray = Object.keys(scope.schools);
          _ref = scope.workInfo[user].locations;
          _results = [];
          for (location in _ref) {
            position = _ref[location];
            if (locationIsSchool()) {
              if (scope.isSchoolActive(location) !== true) {
                _results.push(scope.schoolClicked(location));
              } else {
                _results.push(void 0);
              }
            } else if (scope.isDepartmentActive(location) !== true) {
              _results.push(scope.departmentClicked(location));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        /*
        Description: We do not know or need to know whether the location is a department or school,
         only whether or not the current location is active
        Input: [String] location - location name
         */
        scope.isLocationActive = function(location) {
          return scope.isSchoolActive(location) || scope.isDepartmentActive(location);
        };

        /*
        Description: Checking to see if school is active
        Input: [String] school : name of the school
         */
        scope.isSchoolActive = function(school) {
          return __indexOf.call(scope.activeSchools, school) >= 0;
        };

        /*
        Description: Checking to see if department is active
        Input: [String] school : name of the department
         */
        scope.isDepartmentActive = function(department) {
          return __indexOf.call(scope.activeDepartments, department) >= 0;
        };
        scope.updateActiveSchools = function(school) {
          var dep, _i, _len, _ref, _results;
          if (__indexOf.call(scope.activeSchools, school) >= 0) {
            scope.activeSchools.splice(scope.activeSchools.indexOf(school), 1);
            _ref = scope.schools[school].departments;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              dep = _ref[_i];
              if (scope.isDepartmentActive(dep) === true) {
                _results.push(scope.departmentClicked(dep));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            return scope.activeSchools.push(school);
          }
        };
        scope.updateGraph = function(nodes, add) {
          return scope.g.updateGraph(nodes, add);
        };
        return scope.toggleDepartmentLabels = function() {
          return $scope.activeDepartmentLabels = !$scope.activeDepartmentLabels;
        };
      };
      return {
        restrict: "E",
        replace: true,
        controller: 'graphCtrl',
        controllerAs: 'graphCtrl',
        templateUrl: "partials/graph.html",
        link: linker
      };
    }
  ]).controller('graphCtrl', function($scope, userInfoService) {
    var gCtrl;
    gCtrl = this;
    gCtrl.userInfoService = userInfoService;
    $scope.activeDepartmentLabels = true;
    $scope.activeSchools = [];
    $scope.activeDepartments = [];
    $scope.positionCount = [];
    $scope.departmentCount = [];
    return gCtrl.userInfoService.getWorkInfo().then(function(data) {
      $scope.workInfo = data.workInfo;
      $scope.schools = data.schools;
      return $scope.committees = data.committees;
    });
  });

  ICCVApp.directive("extraInformation", function() {
    var linker;
    linker = function(scope, element, attrs) {
      return scope.pinSchools = "Schools Pinned";
    };
    return {
      restrict: "E",
      require: "^graph",
      templateUrl: "partials/extra_info.html",
      replace: true
    };
  });

  ICCVApp.directive('visualizationNavbar', function() {
    var linker;
    linker = function(scope, element, attrs) {
      return scope.inNavBar = false;
    };
    return {
      require: "^graph",
      templateUrl: "partials/navigation_bar.html",
      replace: true,
      restrict: "E",
      controller: 'navbarCtrl',
      controllerAs: 'navbarCtrl',
      link: linker
    };
  }).controller('navbarCtrl', function() {});

}).call(this);

//# sourceMappingURL=ICCVCtrl.js.map
