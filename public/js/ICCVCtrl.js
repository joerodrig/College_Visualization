// Generated by CoffeeScript 1.8.0

/**
@ngdoc controller
@name ICCV.controller:ICCVCtrl

@description


@requires $scope
 */

(function() {
  var ICCVApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ICCVApp = angular.module("ICCV", ["extra_information"]);

  ICCVApp.controller("ICCVCtrl", [
    "$scope", "$http", function($scope, $http) {
      $scope.activeDepartmentLabels = true;
      $scope.activeGroupName;
      $scope.activeSchools = [];
      $scope.activeDepartments = [];
      $scope.showExtraInfo = false;
      $scope.positionCount = [];
      $scope.departmentCount = [];
      $scope.committees = {
        "C1": {
          id: "C1",
          committee_name: "Committee One",
          people: ["cmckenzie"]
        },
        "C3": {
          id: "C3",
          committee_name: "CS Committee",
          people: ["aerkan", "dturnbull", "barr", "nprestopnik", "pdickson", "tdragon"]
        },
        "C4": {
          id: "C4",
          committee_name: "Another Committee",
          people: ["jhilton", "euell", "ebleicher", "ppospisil"]
        }
      };
      $scope.workInfo = $http.get("json/work_info.json").success(function(data, status, headers, config) {
        $scope.workInfo = data;
      });
      $scope.schools = $http.get("json/schools_departments.json").success(function(data, status, headers, config) {
        $scope.schools = data;
      });
      return $scope.canonical = $http.get("json/canonical.json").success(function(data, status, headers, config) {
        $scope.canonical = data;
      });
    }
  ]);


  /**
  Committee Graph directive
   */

  ICCVApp.directive("graph", function($http, $q) {
    var linker;
    linker = function(scope, element, attrs) {
      var TEI;
      $q.all([scope.workInfo, scope.schools, scope.canonical]).then(function() {
        var convert, job, loadedData, nameFix, nameIssue, options, schools, user2SchoolMap, username, workInfo, _i, _len, _ref, _ref1;
        console.log("Graph Dependencies Loaded");
        convert = (function(_this) {
          return function() {};
        })(this);
        _ref = scope.workInfo;
        for (username in _ref) {
          workInfo = _ref[username];
          for (_i = 0, _len = workInfo.length; _i < _len; _i++) {
            job = workInfo[_i];
            _ref1 = scope.canonical;
            for (nameIssue in _ref1) {
              nameFix = _ref1[nameIssue];
              if (nameIssue === job.location) {
                job.location = nameFix;
              }
            }
          }
        }
        convert();
        user2SchoolMap = (function(_this) {
          return function() {
            var administration, inAdministration, key, other, school, schoolInfo, work, _ref2, _results;
            inAdministration = function(position) {
              return workInfo.position.indexOf("Dean") !== -1 || workInfo.position.indexOf("Provost") !== -1 || workInfo.position.indexOf("President") !== -1;
            };
            _ref2 = scope.workInfo;
            _results = [];
            for (username in _ref2) {
              work = _ref2[username];
              _results.push((function() {
                var _results1;
                _results1 = [];
                for (key in work) {
                  workInfo = work[key];
                  _results1.push((function() {
                    var _ref3, _results2;
                    _ref3 = scope.schools;
                    _results2 = [];
                    for (school in _ref3) {
                      schoolInfo = _ref3[school];
                      if (school === workInfo.location) {
                        if (school === "School of Humanities and Sciences") {
                          administration = "Humanities and Sciences Administration";
                          other = "Humanities and Sciences Other";
                        } else if (school === "School of Music") {
                          administration = "Music Administration";
                          other = "Music Other";
                        } else if (school === "School of Health Sciences and Human Performance") {
                          administration = "Health Sciences Administration";
                          other = "Health Sciences Other";
                        } else if (school === "Roy H. Park School of Communications") {
                          administration = "Park Administration";
                          other = "Park Other";
                        } else if (school === "School of Business") {
                          administration = "Business Administration";
                          other = "Business Other";
                        } else if (school === "Orphans") {
                          workInfo.location = "Orphans Other";
                        }
                        if (inAdministration(workInfo.position)) {
                          _results2.push(workInfo.location = administration);
                        } else if (work.length === 1) {
                          _results2.push(workInfo.position = other);
                        } else {
                          _results2.push(void 0);
                        }
                      } else {
                        _results2.push(void 0);
                      }
                    }
                    return _results2;
                  })());
                }
                return _results1;
              })());
            }
            return _results;
          };
        })(this);
        user2SchoolMap();
        schools = (function(_this) {
          return function() {
            var department, key, school, schoolInfo, usersToDepartment, work, _j, _len1, _ref2, _ref3, _ref4;
            usersToDepartment = function(department) {
              var standardizedUsers, _ref2, _results;
              department.standardizedUsers = {};
              standardizedUsers = department.standardizedUsers;
              _ref2 = scope.workInfo;
              _results = [];
              for (username in _ref2) {
                workInfo = _ref2[username];
                scope.workInfo[username].locations = {};
                _results.push((function() {
                  var _j, _len1, _results1;
                  _results1 = [];
                  for (_j = 0, _len1 = workInfo.length; _j < _len1; _j++) {
                    job = workInfo[_j];
                    scope.workInfo[username].locations[job.location] = job.position;
                    if (job.location === department.id) {
                      _results1.push(standardizedUsers[username] = {
                        id: username,
                        type: "user",
                        size: "8",
                        fill: "#000"
                      });
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                })());
              }
              return _results;
            };
            _ref2 = scope.schools;
            for (school in _ref2) {
              schoolInfo = _ref2[school];
              scope.schools[school].id = school;
              scope.schools[school].type = "school";
              schoolInfo.standardizedDepartments = {};
              schoolInfo.standardizedUsers = {};
              _ref3 = schoolInfo.departments;
              for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
                department = _ref3[_j];
                schoolInfo.standardizedDepartments[department] = {
                  id: department,
                  type: "department",
                  fill: "#88dddd"
                };
                usersToDepartment(schoolInfo.standardizedDepartments[department]);
                schoolInfo.standardizedDepartments[department].size = Object.keys(schoolInfo.standardizedDepartments[department].standardizedUsers).length;
                if (schoolInfo.standardizedDepartments[department].size < 12) {
                  schoolInfo.standardizedDepartments[department].size = 12;
                }
              }
              _ref4 = scope.workInfo;
              for (username in _ref4) {
                work = _ref4[username];
                if (work.length === 1) {
                  for (key in work) {
                    workInfo = work[key];
                    if (school === workInfo.location) {
                      schoolInfo.standardizedUsers[username] = {
                        id: username,
                        type: "user",
                        size: "8",
                        fill: "#000"
                      };
                    }
                  }
                }
              }
            }
          };
        })(this);
        schools();
        options = {
          container: attrs.container
        };
        loadedData = {
          workInfo: scope.workInfo,
          schools: scope.schools,
          schoolClicked: scope.schoolClicked,
          departmentClicked: scope.departmentClicked,
          userClicked: scope.userClicked
        };
        scope.g = new CommitteeGraph.initialize(element[0], loadedData, options);
      });
      scope.expandAllSchools = function() {
        var properties, school, _ref, _results;
        _ref = scope.schools;
        _results = [];
        for (school in _ref) {
          properties = _ref[school];
          _results.push(scope.schoolClicked(school));
        }
        return _results;
      };
      scope.toggleExtraInfo = TEI = function(show) {
        scope.showExtraInfo = show;
      };
      scope.committeeClicked = function(committee) {
        var location, name, position, workLocations, _i, _len, _ref;
        _ref = scope.committees[committee.id].people;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          workLocations = scope.workInfo[name].locations;
          for (location in workLocations) {
            position = workLocations[location];
            if (location.indexOf("School") !== -1) {
              if (scope.isSchoolActive(location) === false) {
                scope.schoolClicked(location);
              }
            } else {
              if (scope.isDepartmentActive(location) === false) {
                scope.departmentClicked(location);
              }
            }
          }
        }
      };
      scope.schoolClicked = function(school) {
        var addDepartments, selectedSchool;
        addDepartments = scope.isSchoolActive(school);
        scope.updateActiveSchools(school);
        selectedSchool = scope.schools[school];
        return scope.updateGraph(selectedSchool, !addDepartments);
      };
      scope.departmentClicked = function(department) {
        var addPeople, allActiveLocations, getLinkedSchool, linkedSchool, location, position, properties, selectedDepartment, username, _ref, _ref1;
        getLinkedSchool = (function(_this) {
          return function() {
            var d, school, schoolProperties, _i, _len, _ref, _ref1;
            _ref = scope.schools;
            for (school in _ref) {
              schoolProperties = _ref[school];
              _ref1 = schoolProperties.departments;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                d = _ref1[_i];
                if (d === department) {
                  return school;
                }
              }
            }
          };
        })(this);
        linkedSchool = getLinkedSchool();
        addPeople = !scope.isDepartmentActive(department);
        if (addPeople === true && scope.isSchoolActive(linkedSchool) === false) {
          scope.schoolClicked(linkedSchool);
        }
        if (addPeople === false) {
          scope.activeDepartments.splice(scope.activeDepartments.indexOf(department), 1);
        } else {
          scope.activeDepartments.push(department);
          console.log(scope.activeDepartments);
        }
        selectedDepartment = scope.schools[linkedSchool].standardizedDepartments[department];
        _ref = selectedDepartment.standardizedUsers;
        for (username in _ref) {
          properties = _ref[username];
          _ref1 = scope.workInfo[username].locations;
          for (location in _ref1) {
            position = _ref1[location];
            allActiveLocations = scope.isLocationActive(location);
            if (allActiveLocations === false) {
              break;
            }
          }
          if (allActiveLocations === false) {
            properties.fill = "orange";
          } else {
            properties.fill = "#000";
          }
        }
        return scope.updateGraph(selectedDepartment, addPeople);
      };
      scope.userClicked = function(user) {
        var location, position, schoolsArray, _ref, _results;
        schoolsArray = Object.keys(scope.schools);
        _ref = scope.workInfo[user].locations;
        _results = [];
        for (location in _ref) {
          position = _ref[location];
          if (schoolsArray.indexOf(location) !== -1) {
            if (scope.isSchoolActive(location) !== true) {
              _results.push(scope.schoolClicked(location));
            } else {
              _results.push(void 0);
            }
          } else if (scope.isDepartmentActive(location) !== true) {
            _results.push(scope.departmentClicked(location));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      /*
      Description: We do not know or need to know whether the location is a department or school,
       only whether or not the current location is active
      Input: [String] location - location name
       */
      scope.isLocationActive = function(location) {
        return scope.isSchoolActive(location) || scope.isDepartmentActive(location);
      };
      scope.isSchoolActive = function(school) {
        return __indexOf.call(scope.activeSchools, school) >= 0;
      };
      scope.isDepartmentActive = function(department) {
        return __indexOf.call(scope.activeDepartments, department) >= 0;
      };
      scope.updateActiveSchools = function(school) {
        var dep, _i, _len, _ref, _results;
        if (__indexOf.call(scope.activeSchools, school) >= 0) {
          scope.activeSchools.splice(scope.activeSchools.indexOf(school), 1);
          _ref = scope.schools[school].departments;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            dep = _ref[_i];
            if (scope.isDepartmentActive(dep) === true) {
              _results.push(scope.departmentClicked(dep));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          return scope.activeSchools.push(school);
        }
      };
      scope.updateGraph = function(nodes, add) {
        scope.g.updateGraph(nodes, add);
      };
      return scope.toggleDepartmentLabels = function() {
        return $scope.activeDepartmentLabels = !$scope.activeDepartmentLabels;
      };
    };
    return {
      restrict: "E",
      replace: true,
      templateUrl: "partials/graph.html",
      link: linker
    };
  });

  angular.module("extra_information", []).directive("extraInformation", function() {
    return {
      restrict: "E",
      templateUrl: "partials/extra_info.html",
      replace: true
    };
  });

}).call(this);

//# sourceMappingURL=ICCVCtrl.js.map
