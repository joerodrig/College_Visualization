// Generated by CoffeeScript 1.8.0
(function() {
  var CommitteeGraph, Controller, EmployeeGraph, Graph, cGraph, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CommitteeGraph = (function() {
    function CommitteeGraph() {}

    CommitteeGraph.prototype.initialize = function(element, data, options) {
      return new cGraph(element, data, options);
    };

    return CommitteeGraph;

  })();

  cGraph = (function() {
    function cGraph(element, data, options) {
      var controller;
      return controller = new Controller(data, options);
    }

    return cGraph;

  })();

  Controller = (function() {
    function Controller(data, options) {
      var clickListeners, employeeGraph;
      clickListeners = {
        schoolClicked: data.schoolClicked,
        departmentClicked: data.departmentClicked
      };
      employeeGraph = new EmployeeGraph(data, clickListeners, options);
      return {
        updateGraph: (function(_this) {
          return function(nodes, adding) {
            return employeeGraph.updateGraph(nodes, adding);
          };
        })(this)
      };
    }

    return Controller;

  })();

  Graph = (function() {
    function Graph(schoolInfo, listeners, options) {
      var createdGraph;
      this.schoolInfo = schoolInfo;
      this.options = options;
      createdGraph = new ngraph.start(listeners);
      this.activeFilters = [];
      this.graph = createdGraph.graph;
      this.graphParameters = {
        renderer: createdGraph.renderer,
        svg: createdGraph.svg
      };
      return;
    }

    return Graph;

  })();


  /*
    Displays all Ithaca College employees that are in a specific committee based off of the
    parameters
   */

  EmployeeGraph = (function(_super) {
    __extends(EmployeeGraph, _super);

    function EmployeeGraph() {
      this.toggleLinks = __bind(this.toggleLinks, this);
      this.rmvNode = __bind(this.rmvNode, this);
      this.addNode = __bind(this.addNode, this);
      this.rmvLink = __bind(this.rmvLink, this);
      this.addLink = __bind(this.addLink, this);
      this.updateGraph = __bind(this.updateGraph, this);
      this.initial = __bind(this.initial, this);
      var graphElement;
      EmployeeGraph.__super__.constructor.apply(this, arguments);
      graphElement = this.graphParameters.renderer.svgRoot;
      $(graphElement).attr('class', 'employee_visualization');
      $(graphElement).detach();
      $('#demo').append(graphElement);
      this.graphParameters.renderer.run();
      this.initial();
      console.log(this.graph);
      console.log(this.graphParameters);
    }

    EmployeeGraph.prototype.initial = function() {
      var mainNode, nodePosition, school, schoolNode, _i, _len, _ref, _results;
      nodePosition = this.graphParameters.renderer.layout.getNodePosition;
      mainNode = {
        id: "IC",
        type: "main"
      };
      this.graphParameters.renderer.layout.pinNode(this.addNode(mainNode), true);
      _ref = this.schoolInfo.schools;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        school = _ref[_i];
        schoolNode = {
          id: school.name,
          type: school.type
        };
        _results.push(this.graph.addLink(this.addNode(schoolNode).id, mainNode.id));
      }
      return _results;
    };

    EmployeeGraph.prototype.updateGraph = function(nodes, adding) {
      var node, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (adding) {
          this.addNode(node);
        }
        if (node.type === "school") {
          _results.push(this.toggleLinks(node, adding));

          /*
          if node.type is "user"
            for work in node.workInfo
              hasNode = @graph.getNode(work.location)
               *Checking to see if department or school
              if hasNode is undefined
                associatedSchool = @returnSchool(work.location)
                if @graph.hasLink(work.location,associatedSchool) is null
                  @addLink(@addNode(work.location,"dn"), @linkSchool(work.location),1)
              else if hasNode
                if work.location.indexOf("School") isnt -1
                   *Add a link to the school if user position is dean, or if that is the only link
                  if node.workInfo.length == 1 || work.location.indexOf("Dean") isnt -1
                    @addLink(node.id,work.location,2)
                else
                  @addLink(node.id,work.location)
           */
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    EmployeeGraph.prototype.addLink = function(from, to, strength) {
      return this.graph.addLink(from, to, strength);
    };

    EmployeeGraph.prototype.rmvLink = function(link) {
      return console.log(this.graph.removeLink(link));
    };

    EmployeeGraph.prototype.addNode = function(node) {
      if (this.graph.getNode(node.id) === void 0) {
        if (node.type === "user") {
          return this.graph.addNode(node, {
            fill: "#000",
            size: "12",
            type: "user_node"
          });
        } else if (node.type === "department") {
          return this.graph.addNode(node.id, {
            fill: "#AAA",
            size: "14",
            type: "department_node"
          });
        } else if (node.type === "school") {
          return this.graph.addNode(node.id, {
            fill: "#a3ff00",
            size: "18",
            type: "school_node"
          });
        } else if (node.type === "main") {
          return this.graph.addNode(node.id, {
            fill: "blue",
            size: "22",
            type: "main_node"
          });
        }
      }
    };

    EmployeeGraph.prototype.rmvNode = function(node) {};

    EmployeeGraph.prototype.toggleLinks = function(node, adding) {
      var department, _i, _len, _ref;
      if (node.type === "school") {
        _ref = node.associatedDepartments;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          department = _ref[_i];
          if (adding) {
            this.addLink(node.id, this.addNode(department).id, 2);
          } else {
            this.graph.removeLink(this.graph.hasLink(node.id, department.id));
            this.graph.removeNode(department.id);
          }
        }
      }
      return this.rmvNode(node);
    };

    return EmployeeGraph;

  })(Graph);

  exports = this;

  exports.CommitteeGraph = new CommitteeGraph();

}).call(this);

//# sourceMappingURL=committee_graph.js.map
