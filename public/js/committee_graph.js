// Generated by CoffeeScript 1.8.0
(function() {
  var CommitteeGraph, Controller, EmployeeGraph, Graph, LocationGraph, PositionGraph, cGraph, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CommitteeGraph = (function() {
    function CommitteeGraph() {}

    CommitteeGraph.prototype.initialize = function(element, data, options) {
      console.log("Initializing Committee Graph");
      return new cGraph(element, data, options);
    };

    return CommitteeGraph;

  })();

  cGraph = (function() {
    function cGraph(element, data, options) {
      var controller;
      return controller = new Controller(data, options);
    }

    return cGraph;

  })();

  Controller = (function() {
    function Controller(data, options) {
      var employeeGraph;
      employeeGraph = new EmployeeGraph(data.schoolLinker, options);
      return {
        updateGraph: (function(_this) {
          return function(members) {
            return employeeGraph.updateGraph(members);
          };
        })(this)
      };
    }

    return Controller;

  })();

  Graph = (function() {
    function Graph(schools, options) {
      this.schools = schools;
      this.options = options;
      this.addLink = __bind(this.addLink, this);
      this.addNode = __bind(this.addNode, this);
      this.updateGraph = __bind(this.updateGraph, this);
      this.defaultLayout = __bind(this.defaultLayout, this);
      this.defaultGraphics = __bind(this.defaultGraphics, this);
      this.activeFilters = [];
      this.graph = Viva.Graph.graph();
      this.graphParameters = {
        graphics: this.defaultGraphics(),
        layout: this.defaultLayout()
      };
      return;
    }

    Graph.prototype.defaultGraphics = function() {
      var graphics;
      graphics = Viva.Graph.View.svgGraphics();
      graphics.node(function(node) {
        var img, svgText, ui;
        ui = Viva.Graph.svg('g');
        svgText = Viva.Graph.svg('text').attr('font-size', "18px").attr('text-anchor', 'middle').attr('y', -17.).text(node.id);
        img = Viva.Graph.svg('circle').attr('r', node.data.size).attr('fill', node.data.fillColor).attr('stroke', '#000');
        ui.append(img);
        ui.append(svgText);
        return ui;
      }).placeNode(function(nodeUI, pos) {
        return nodeUI.attr('transform', 'translate(' + pos.x + ',' + pos.y + ')');
      });
      return graphics;
    };

    Graph.prototype.defaultLayout = function() {
      var layout;
      layout = Viva.Graph.Layout.forceDirected(this.graph, {
        springTransform: function(link, spring) {
          if (link.data === 1) {
            spring.coeff = 0.00003;
            spring.length = 350;
            spring.weight = 2;
          } else if (link.data === 2) {
            spring.length = 300;
            spring.coeff = 0.0003;
          }
          return {
            gravity: -10
          };
        }
      });
      return layout;
    };

    Graph.prototype.updateGraph = function() {};

    Graph.prototype.addNode = function() {};

    Graph.prototype.addLink = function() {};

    Graph.prototype.randomNum = function() {
      return Math.floor(Math.random() * max);
    };

    return Graph;

  })();


  /*
    Displays all Ithaca College employees that are in a specific committee based off of the
    parameters
   */

  EmployeeGraph = (function(_super) {
    __extends(EmployeeGraph, _super);

    function EmployeeGraph() {
      this.addNode = __bind(this.addNode, this);
      this.updateGraph = __bind(this.updateGraph, this);
      var renderer, svgElement;
      EmployeeGraph.__super__.constructor.apply(this, arguments);
      renderer = Viva.Graph.View.renderer(this.graph, {
        container: document.getElementById(this.options.container),
        graphics: this.graphParameters.graphics,
        layout: this.graphParameters.layout,
        prerender: true
      });
      svgElement = this.graphParameters.graphics.getSvgRoot();
      svgElement.attr('class', 'employee_visualization');
      $(svgElement).bind('mousewheel DOMMouseScroll', function(e) {
        if (e.shiftKey !== true) {
          e.preventDefault();
          return false;
        }
      });
      renderer.run();
    }

    EmployeeGraph.prototype.updateGraph = function(members) {
      var department, member, memberNames, school, vals, workInfo, _i, _j, _len, _len1, _results;
      memberNames = [];
      for (_i = 0, _len = members.length; _i < _len; _i++) {
        member = members[_i];
        memberNames.push(member.name);
      }
      this.graph.forEachNode((function(_this) {
        return function(node) {
          var _ref;
          if ((_ref = node.id, __indexOf.call(memberNames, _ref) < 0)) {
            _this.graph.removeNode(node.id);
          }
        };
      })(this));
      _results = [];
      for (_j = 0, _len1 = members.length; _j < _len1; _j++) {
        member = members[_j];
        this.addNode(member, "user");
        _results.push((function() {
          var _k, _len2, _ref, _results1;
          _ref = member.workInfo;
          _results1 = [];
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            workInfo = _ref[_k];
            if (workInfo.location.indexOf("School") > -1) {
              if (member.workInfo.length === 1) {
                if (this.graph.getNode(workInfo.location) === void 0) {
                  this.addNode(workInfo, "school");
                }
                _results1.push(this.graph.addLink(member.name, workInfo.location, 1));
              } else {
                _results1.push(void 0);
              }
            } else {
              this.addNode(workInfo, "department");
              this.graph.addLink(member.name, workInfo.location, 1);
              _results1.push((function() {
                var _ref1, _results2;
                _ref1 = this.schools;
                _results2 = [];
                for (school in _ref1) {
                  vals = _ref1[school];
                  _results2.push((function() {
                    var _l, _len3, _ref2, _results3;
                    _ref2 = this.schools[school].departments;
                    _results3 = [];
                    for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                      department = _ref2[_l];
                      if (department === workInfo.location) {
                        if (this.graph.getNode(school) === void 0) {
                          this.addNode({
                            location: school
                          }, "school");
                        }
                        _results3.push(this.graph.addLink(workInfo.location, school, 2));
                      } else {
                        _results3.push(void 0);
                      }
                    }
                    return _results3;
                  }).call(this));
                }
                return _results2;
              }).call(this));
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    EmployeeGraph.prototype.addNode = function(nodeData, type) {
      if (type === "user") {
        return this.graph.addNode(nodeData.name, {
          fillColor: "black",
          size: "12"
        });
      } else if (type === "department") {
        return this.graph.addNode(nodeData.location, {
          fillColor: "blue",
          size: "14"
        });
      } else if (type === "school") {
        return this.graph.addNode(nodeData.location, {
          fillColor: "green",
          size: "18"
        });
      }
    };

    return EmployeeGraph;

  })(Graph);

  LocationGraph = (function(_super) {
    __extends(LocationGraph, _super);

    function LocationGraph() {
      var renderer;
      LocationGraph.__super__.constructor.apply(this, arguments);
      renderer = Viva.Graph.View.renderer(this.graph, {
        container: document.getElementById(this.options.container),
        graphics: this.graphParameters.graphics,
        layout: this.graphParameters.layout,
        prerender: true
      });
      renderer.run();
    }

    return LocationGraph;

  })(Graph);

  PositionGraph = (function(_super) {
    __extends(PositionGraph, _super);

    function PositionGraph() {
      var renderer;
      PositionGraph.__super__.constructor.apply(this, arguments);
      renderer = Viva.Graph.View.renderer(this.graph, {
        container: document.getElementById(this.options.container),
        graphics: this.graphParameters.graphics,
        layout: this.graphParameters.layout,
        prerender: true
      });
      renderer.run();
    }

    return PositionGraph;

  })(Graph);

  exports = this;

  exports.CommitteeGraph = new CommitteeGraph();

}).call(this);

//# sourceMappingURL=committee_graph.js.map
