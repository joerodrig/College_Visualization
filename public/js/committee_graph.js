// Generated by CoffeeScript 1.8.0
(function() {
  var CommitteeGraph, Controller, EmployeeGraph, Graph, cGraph, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CommitteeGraph = (function() {
    function CommitteeGraph() {}

    CommitteeGraph.prototype.initialize = function(element, data, options) {
      return new cGraph(element, data, options);
    };

    return CommitteeGraph;

  })();

  cGraph = (function() {
    function cGraph(element, data, options) {
      var controller;
      return controller = new Controller(data, options);
    }

    return cGraph;

  })();

  Controller = (function() {
    function Controller(data, options) {
      var employeeGraph;
      employeeGraph = new EmployeeGraph(data, options);
      return {
        updateGraph: (function(_this) {
          return function(nodes, adding) {
            return employeeGraph.updateGraph(nodes, adding);
          };
        })(this),
        pinNode: (function(_this) {
          return function(node) {
            return employeeGraph.pinNode(node);
          };
        })(this)
      };
    }

    return Controller;

  })();

  Graph = (function() {
    function Graph(schoolInfo, listeners, options) {
      var createdGraph;
      this.schoolInfo = schoolInfo;
      this.options = options;
      createdGraph = new ngraph.start(listeners);
      this.activeFilters = [];
      this.graph = createdGraph.graph;
      this.graphParameters = {
        renderer: createdGraph.renderer,
        svg: createdGraph.svg
      };
    }

    return Graph;

  })();


  /*
    Displays all Ithaca College employees that are in a specific committee based off of the
    parameters
   */

  EmployeeGraph = (function(_super) {
    __extends(EmployeeGraph, _super);

    function EmployeeGraph() {
      this.addLink = __bind(this.addLink, this);
      this.removeLink = __bind(this.removeLink, this);
      this.toggleLinks = __bind(this.toggleLinks, this);
      this.updateNodeAttributes = __bind(this.updateNodeAttributes, this);
      this.addNode = __bind(this.addNode, this);
      this.updateGraph = __bind(this.updateGraph, this);
      this.initial = __bind(this.initial, this);
      this.pinNode = __bind(this.pinNode, this);
      var graphElement;
      EmployeeGraph.__super__.constructor.apply(this, arguments);
      graphElement = this.graphParameters.renderer.svgRoot;
      $(graphElement).attr('class', 'employee_visualization');
      $(graphElement).detach();
      $('#demo').append(graphElement);
      this.graphParameters.renderer.run();
      this.initial();
      console.log(this.graph.getNode("Ithaca College"));
      console.log(this.graph);
      console.log(this.graphParameters);
    }

    EmployeeGraph.prototype.pinNode = function(node) {
      var gNode;
      gNode = this.graph.getNode(node);
      if (this.graphParameters.renderer.layout.isNodePinned(gNode) !== true) {
        return this.graphParameters.renderer.layout.pinNode(this.graph.getNode(node), true);
      } else {
        return this.graphParameters.renderer.layout.pinNode(this.graph.getNode(node), false);
      }
    };

    EmployeeGraph.prototype.initial = function() {
      var mainNode, properties, school, schoolNode, totalDepartments, _ref, _ref1, _results;
      totalDepartments = 0;
      _ref = this.schoolInfo.schools;
      for (school in _ref) {
        properties = _ref[school];
        totalDepartments += properties.departments.length;
      }
      mainNode = {
        id: "Ithaca College",
        type: "main",
        size: totalDepartments,
        fill: "#0055bb",
        textSize: "38px"
      };
      this.graphParameters.renderer.layout.pinNode(this.addNode(mainNode), true);
      _ref1 = this.schoolInfo.schools;
      _results = [];
      for (school in _ref1) {
        properties = _ref1[school];
        schoolNode = {
          id: school,
          type: properties.type,
          fill: properties.fill,
          textSize: "38px",
          size: properties.departments.length
        };
        this.addNode(schoolNode);
        _results.push(this.graph.addLink(schoolNode.id, mainNode.id, schoolNode.size));
      }
      return _results;
    };

    EmployeeGraph.prototype.updateGraph = function(primaryNode, adding) {
      var departmentName, index, previous, properties, username, _ref, _ref1, _results;
      if (primaryNode.type === "school") {
        _ref = primaryNode.standardizedDepartments;
        for (departmentName in _ref) {
          properties = _ref[departmentName];
          this.toggleLinks(primaryNode, properties, adding);
        }
      }
      if (primaryNode.type === "department") {
        _ref1 = primaryNode.standardizedUsers;
        for (username in _ref1) {
          properties = _ref1[username];
          this.toggleLinks(primaryNode, properties, adding);
        }
      }
      if (primaryNode.type === "committee_links") {
        previous = null;
        index = 0;
        _results = [];
        while (index < primaryNode.members.length) {
          if (primaryNode.members[index + 1] !== void 0 && adding) {
            this.graph.addLink(primaryNode.members[index], primaryNode.members[index + 1], 999);
          } else if (adding === !true) {
            this.graph.removeLink(this.graph.hasLink(primaryNode.members[index], primaryNode.members[index + 1]));
          }
          _results.push(index++);
        }
        return _results;
      }
    };

    EmployeeGraph.prototype.addNode = function(node) {
      if (this.graph.getNode(node.id) === void 0) {
        if (node.type === "school") {
          if (node.size < 14) {
            node.size = 14;
          } else if (node.size > 25) {
            node.size = 25;
          }
          node.size = node.size * 2;
        }
        return this.graph.addNode(node.id, {
          fill: node.fill,
          size: node.size,
          textSize: node.textSize,
          type: node.type + "_node"
        });
      } else {
        return this.updateNodeAttributes(node);
      }
    };


    /*
    Description: Get all node links from current loaded node in graph. Remove the current node in graph. Re-add node
    with new properties. Re-add links
    TODO: Re-add node in same position
     */

    EmployeeGraph.prototype.updateNodeAttributes = function(node) {
      var currNode, currNodeLinks, l, link, links, _i, _j, _len, _len1, _ref, _results;
      currNode = this.graph.getNode(node.id);
      currNodeLinks = currNode.links;
      links = [];
      _ref = currNode.links;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        links.push({
          fromId: link.fromId,
          toId: link.toId,
          strength: link.data
        });
      }
      this.graph.removeNode(node.id);
      this.addNode(node);
      _results = [];
      for (_j = 0, _len1 = links.length; _j < _len1; _j++) {
        l = links[_j];
        if (l.fromId !== node.id) {
          _results.push(this.addLink(l.fromId, node.id, l.strength));
        } else {
          _results.push(this.addLink(node.id, l.toId, l.strength));
        }
      }
      return _results;
    };

    EmployeeGraph.prototype.toggleLinks = function(from, to, adding) {
      if (adding) {
        this.addNode(to);
        return this.addLink(from.id, to.id, 2);
      } else {
        return this.removeLink(from.id, to);
      }
    };

    EmployeeGraph.prototype.removeLink = function(fromID, to) {
      this.graph.removeLink(this.graph.hasLink(fromID, to.id));
      if (this.graph.getLinks(to.id).length < 1) {
        return this.graph.removeNode(to.id);
      } else {
        return this.updateNodeAttributes(to);
      }
    };

    EmployeeGraph.prototype.addLink = function(from, to, strength) {
      if (this.graph.hasLink(from, to) === null) {
        return this.graph.addLink(from, to, strength);
      }
    };

    return EmployeeGraph;

  })(Graph);

  exports = this;

  exports.CommitteeGraph = new CommitteeGraph();

}).call(this);

//# sourceMappingURL=committee_graph.js.map
