// Generated by CoffeeScript 1.8.0
(function() {
  var CommitteeGraph, Controller, EmployeeGraph, Graph, cGraph, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CommitteeGraph = (function() {
    function CommitteeGraph() {}

    CommitteeGraph.prototype.initialize = function(element, data, options) {
      return new cGraph(element, data, options);
    };

    return CommitteeGraph;

  })();

  cGraph = (function() {
    function cGraph(element, data, options) {
      var controller;
      return controller = new Controller(data, options);
    }

    return cGraph;

  })();

  Controller = (function() {
    function Controller(data, options) {
      var clickListeners, employeeGraph;
      clickListeners = {
        schoolClicked: data.schoolClicked,
        departmentClicked: data.departmentClicked
      };
      employeeGraph = new EmployeeGraph(data.schoolLinker, clickListeners, options);
      return {
        updateGraph: (function(_this) {
          return function(nodes, adding) {
            return employeeGraph.updateGraph(nodes, adding);
          };
        })(this)
      };
    }

    return Controller;

  })();

  Graph = (function() {
    function Graph(schools, clickListeners, options) {
      var createdGraph;
      this.schools = schools;
      this.clickListeners = clickListeners;
      this.options = options;
      createdGraph = new ngraph.start();
      this.activeFilters = [];
      this.graph = createdGraph.graph;
      this.graphParameters = {
        renderer: createdGraph.renderer,
        svg: createdGraph.svg
      };
      this.graphParameters.renderer.node((function(_this) {
        return function(node) {
          var circ, svg, txt, ui;
          svg = _this.graphParameters.svg;
          ui = svg('g');
          circ = svg("circle").attr('fill', node.data.fill).attr('r', node.data.size).attr('class', node.data.type);
          txt = svg('text').attr('font-size', "18px").attr('text-anchor', 'middle').attr('y', parseInt("-" + node.data.size + (-17)));
          txt.textContent = node.id;
          ui.append(circ);
          ui.append(txt);
          if (node.data.type === "school_node") {
            $(circ).click(function() {
              return _this.clickListeners.schoolClicked(node.id);
            });
          } else if (node.data.type === "department_node") {
            $(circ).click(function() {
              return _this.clickListeners.departmentClicked(node.id);
            });
          }
          return ui;
        };
      })(this)).placeNode(function(nodeUI, pos) {
        return nodeUI.attr('transform', 'translate(' + pos.x + ',' + pos.y + ')');
      });
      return;
      this.graphParameters.renderer.layout.simulator.gravity(-15);
      this.graphParameters.renderer.link((function(_this) {
        return function(link) {
          return _this.graphParameters.svg("line").attr("stroke", "#FFF");
        };
      })(this));

      /*
        springTransform:  (link, spring) ->
          if link.data is 1
            spring.coeff = 0.00003
            spring.length = 350
            spring.weight = 2
          else if link.data is 2
            spring.length = 300
            spring.coeff = 0.0003
       */
      return;
    }

    return Graph;

  })();


  /*
    Displays all Ithaca College employees that are in a specific committee based off of the
    parameters
   */

  EmployeeGraph = (function(_super) {
    __extends(EmployeeGraph, _super);

    function EmployeeGraph() {
      this.addNode = __bind(this.addNode, this);
      this.updateGraph = __bind(this.updateGraph, this);
      this.initial = __bind(this.initial, this);
      var graphElement;
      EmployeeGraph.__super__.constructor.apply(this, arguments);
      graphElement = this.graphParameters.renderer.svgRoot;
      $(graphElement).attr('class', 'employee_visualization');
      $(graphElement).detach();
      $('#demo').append(graphElement);
      this.graphParameters.renderer.run();
      this.initial();
    }

    EmployeeGraph.prototype.initial = function() {
      var school, _results;
      this.graphParameters.renderer.layout.pinNode(this.addNode("IC", "main"), true);
      _results = [];
      for (school in this.schools) {
        this.addNode(school, "sn");
        _results.push(this.graph.addLink(school, "IC"));
      }
      return _results;
    };

    EmployeeGraph.prototype.updateGraph = function(nodes, adding) {
      var node, otherNode, strength, toLink, type, work, _i, _j, _len, _len1, _ref, _results;
      toLink = [];
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        node.toLink = [];
        if (node.type === "department") {
          type = "dn";
          strength = 2;
          node.toLink.push(node.school);
        } else if (node.type === "user") {
          type = "un";
          strength = 1;
          _ref = node.workInfo;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            work = _ref[_j];
            if (this.graph.getNode(work.location) === void 0) {
              this.addNode(work.location, "dn");
            }
            if (work.location.indexOf("School") !== -1) {
              if (node.workInfo.length === 1 || work.location.indexOf("Dean") !== -1) {
                node.toLink.push(work.location);
              }
            } else {
              node.toLink.push(work.location);
            }
          }
        }
        if (adding) {
          this.addNode(node.id, type);
          _results.push((function() {
            var _k, _len2, _ref1, _results1;
            _ref1 = node.toLink;
            _results1 = [];
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              otherNode = _ref1[_k];
              _results1.push(this.graph.addLink(node.id, otherNode, strength));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(this.graph.removeNode(node.id));
        }
      }
      return _results;
    };

    EmployeeGraph.prototype.addNode = function(nodeID, type) {
      if (type === "un") {
        return this.graph.addNode(nodeID, {
          fill: "#000",
          size: "12",
          type: "user_node"
        });
      } else if (type === "dn") {
        return this.graph.addNode(nodeID, {
          fill: "#FFF",
          size: "14",
          type: "department_node"
        });
      } else if (type === "sn") {
        return this.graph.addNode(nodeID, {
          fill: "#a3ff00",
          size: "18",
          type: "school_node"
        });
      } else if (type === "main") {
        return this.graph.addNode(nodeID, {
          fill: "blue",
          size: "22",
          type: "main_node"
        });
      }
    };

    return EmployeeGraph;

  })(Graph);

  exports = this;

  exports.CommitteeGraph = new CommitteeGraph();

}).call(this);

//# sourceMappingURL=committee_graph.js.map
