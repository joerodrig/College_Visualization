{
  "name": "ngraph.graph",
  "version": "0.0.2",
  "description": "Base graph structure in ngraph.*",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/anvaka/ngraph.graph.git"
  },
  "keywords": [
    "ngraph",
    "ngraphjs"
  ],
  "author": {
    "name": "Andrei Kashcha"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/anvaka/ngraph.graph/issues"
  },
  "devDependencies": {
    "tap": "~0.4.4"
  },
  "dependencies": {
    "ngraph.events": "0.0.1"
  },
  "readme": "ngraph.graph\n============\n\n[Graph](http://en.wikipedia.org/wiki/Graph_(mathematics\\)) data structure for ngraph.\\*. Library implements API to modify graph structure and supports event-driven notifications when graph changes.\n\n[![build status](https://secure.travis-ci.org/anvaka/ngraph.graph.png)](http://travis-ci.org/anvaka/ngraph.graph)\n\n## Creating a graph\nCreate a graph with no edges and no nodes:\n\n``` js\nvar createGraph = require('ngraph.graph');\nvar g = createGraph();\n```\n\n## Growing a graph\nThe graph `g` can be grown in two ways. You can add one node at a time:\n\n``` js\ng.addNode('hello'); \ng.addNode('world'); \n```\n\nNow graph `g` contains two nodes: `hello` and `world`. You can also use `addLink()` method to grow a graph. Calling this method with nodes which are not present in the graph creates them:\n\n``` js\ng.addLink('space', 'bar'); // now graph 'g' has two new nodes: 'space' and 'bar'\n```\n\nIf nodes already present in the graph 'addLink()' makes them connected:\n\n``` js\ng.addLink('hello', 'world'); // Only a link between 'hello' and 'bar' is created. No new nodes.\n```\n\n### What to use as nodes and edges?\nThe most common and convenient choices are numbers and strings. You can associate arbitrary data with node via optional second argument of `addNode()` method:\n\n``` js\ng.addNode('world', 'custom data'); // Now node 'world' is associated with a string object 'custom data'\n```\n\nYou can also associate arbitrary object with a link using third optional argument of `addLink()` method:\n\n``` js\ng.addLink(1, 2, x); // A link between nodes '1' and '2' is now associated with object 'x'\n```\n\n### Enumerating nodes and links\nAfter you created a graph one of the most common things to do is to enumerate its nodes/links to perform an operation.\n\n``` js\ng.forEachNode(function(node){\n    console.log(node.id, node.data);\n});\n```\n\nThe function takes callback which accepts current node. Node object may contain internal information. `node.id` and `node.data` represent parameters passed to the `g.addNode(id, data)` method and they are guaranteed to be present in future versions of the library.\n\nTo enumerate all links in the graph use `forEachLink()` method:\n\n``` js\ng.forEachLink(function(link) {\n    console.dir(link);\n});\n```\n\nTo enumerate all links for a specific node use `forEachLinkedNode()` method:\n``` js\ng.forEachLinkedNode('hello', function(linkedNode, link){\n    console.log(\"Connected node: \", linkedNode.id, linkedNode.data); \n    console.dir(link); // link object itself\n});\n```\n\nThis method always enumerates both inbound and outbound links. If you want to get only outbound links, pass third optional argument:\n``` js\ng.forEachLinkedNode('hello',\n    function(linkedNode, link) { /* ... */ },\n    true // enumerate only outbound links\n  );\n```\n\nTo get a particular node object use `getNode()` method. E.g.:\n\n``` js\nvar world = g.getNode('world'); // returns 'world' node\nconsole.log(world.id, world.data);\n```\n\nFinally to remove a node or a link from a graph use `removeNode()` or `removeLink()` correspondingly:\n\n``` js\ng.removeNode('space');\n// Removing link is a bit harder, since method requires actual link object:\ng.forEachLinkedNode('hello', function(linkedNode, link){\n  g.removeLink(link); \n});\n```\n\n## Listening to Events\nWhenever someone changes your graph you can listen to notifications:\n\n``` js\ng.on('changed', function(changes) {\n  console.dir(changes); // prints array of change records\n});\n\ng.add(42); // this will trigger 'changed event'\n```\n\nEach change record holds information:\n\n```\nChangeRecord = {\n  changeType: add|remove|update - describes type of this change\n  node: - only present when this record reflects a node change, represents actual node\n  link: - only present when this record reflects a link change, represents actual link\n}\n```\n\nSometimes it is desirable to react only on bulk changes. ngraph.graph supports this via `beginUpdate()`/`endUpdate()` methods:\n\n``` js\ng.beginUpdate();\nfor(var i = 0; i < 100; ++i) {\n  g.addLink(i, i + 1); // no events are triggered here\n}\ng.endUpdate(); // this triggers all listners of 'changed' event\n```\n\nIf you want to stop listen to events use `off()` method:\n``` js\ng.off('changed', yourHandler); // no longer interested in changes from graph\n```\n\nFor more information about events, please follow to [ngraph.events](https://github.com/anvaka/ngraph.events)\n\nInstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install ngraph.graph\n```\n\nLicense\n=======\nBSD 3-clause\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/anvaka/ngraph.graph",
  "_id": "ngraph.graph@0.0.2",
  "_from": "ngraph.graph@0.0.2"
}
