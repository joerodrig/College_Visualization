// Generated by CoffeeScript 1.8.0

/*
@ngdoc controller
@name ICCV.controller:ICCVCtrl

@Description ICCVApp loads in all dependencies.
  Creates a service to format and communicate user data between directives

@Author Joseph Rodriguez
@Last Modified: March 28th, 2015
 */

(function() {
  var ICCVApp;

  ICCVApp = angular.module("ICCV", ['iccv.graph', 'iccv.committeeBar', 'iccv.interactiveBar']);


  /*
  The useInfoService asynchronously loads and formats all of the initial workInfo and school data
  @requires $http,$q
   */

  ICCVApp.service('userInfoService', function($http, $q) {

    /*
    Loads and formats all dependencies to be used
    Returns [Object]
     */
    var getWorkInfo, loadCanonical, loadCommittees, loadSchools, loadWorkInfo;
    getWorkInfo = function() {
      var canonical, committees, schools, workInfo;
      workInfo = loadWorkInfo().then(function(workData) {
        return workInfo = workData;
      });
      canonical = loadCanonical().then(function(canonicalData) {
        return canonical = canonicalData;
      });
      schools = loadSchools().then(function(schoolData) {
        return schools = schoolData;
      });
      committees = loadCommittees().then(function(committeeData) {
        return committees = committeeData;
      });
      return $q.all([canonical, workInfo, schools, committees]).then(function() {
        var fixWorkInfo, mapUsersToSchool, processSchools;
        fixWorkInfo = function() {
          var job, jobNameFix, jobNameIssue, username, workInf, _results;
          _results = [];
          for (username in workInfo) {
            workInf = workInfo[username];
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = workInf.length; _i < _len; _i++) {
                job = workInf[_i];
                _results1.push((function() {
                  var _results2;
                  _results2 = [];
                  for (jobNameIssue in canonical) {
                    jobNameFix = canonical[jobNameIssue];
                    if (jobNameIssue === job.location) {
                      _results2.push(job.location = jobNameFix);
                    } else {
                      _results2.push(void 0);
                    }
                  }
                  return _results2;
                })());
              }
              return _results1;
            })());
          }
          return _results;
        };
        mapUsersToSchool = function() {
          var inAdministration, key, school, schoolInfo, username, work, workInf, _results;
          inAdministration = function(position) {
            return position.indexOf("Dean") !== -1 || position.indexOf("Provost") !== -1 || position.indexOf("President") !== -1;
          };
          _results = [];
          for (username in workInfo) {
            work = workInfo[username];
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (key in work) {
                workInf = work[key];
                _results1.push((function() {
                  var _results2;
                  _results2 = [];
                  for (school in schools) {
                    schoolInfo = schools[school];
                    if (school === workInf.location) {
                      if (inAdministration(workInf.position)) {
                        _results2.push(workInf.location = school + "Administration");
                      } else if (work.length === 1) {
                        _results2.push(workInf.position = school + "Other");
                      } else {
                        _results2.push(void 0);
                      }
                    } else {
                      _results2.push(void 0);
                    }
                  }
                  return _results2;
                })());
              }
              return _results1;
            })());
          }
          return _results;
        };
        processSchools = function() {
          var department, key, school, schoolInfo, username, usersToDepartment, work, workInf, _i, _len, _ref, _results;
          usersToDepartment = function(department) {
            var job, standardizedUsers, username, workInf, _results;
            department.standardizedUsers = {};
            standardizedUsers = department.standardizedUsers;
            _results = [];
            for (username in workInfo) {
              workInf = workInfo[username];
              workInfo[username].locations = {};
              _results.push((function() {
                var _i, _len, _results1;
                _results1 = [];
                for (_i = 0, _len = workInf.length; _i < _len; _i++) {
                  job = workInf[_i];
                  workInfo[username].locations[job.location] = job.position;
                  if (job.location === department.id) {
                    _results1.push(standardizedUsers[username] = {
                      id: username,
                      type: "user",
                      size: "20",
                      textSize: "16px",
                      fill: "#4568A3"
                    });
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              })());
            }
            return _results;
          };
          _results = [];
          for (school in schools) {
            schoolInfo = schools[school];
            schools[school].id = school;
            schools[school].type = "school";
            schools[school].fill = "#076DA4";
            schoolInfo.standardizedDepartments = {};
            schoolInfo.standardizedUsers = {};
            _ref = schoolInfo.departments;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              department = _ref[_i];
              schoolInfo.standardizedDepartments[department] = {
                id: department,
                type: "department",
                fill: "#6A93A9",
                textSize: "26px"
              };
              usersToDepartment(schoolInfo.standardizedDepartments[department]);
              schoolInfo.standardizedDepartments[department].size = Object.keys(schoolInfo.standardizedDepartments[department].standardizedUsers).length;
              if (schoolInfo.standardizedDepartments[department].size < 12) {
                schoolInfo.standardizedDepartments[department].size = 12;
              }
            }
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (username in workInfo) {
                work = workInfo[username];
                if (work.length === 1) {
                  _results1.push((function() {
                    var _results2;
                    _results2 = [];
                    for (key in work) {
                      workInf = work[key];
                      if (school === workInf.location) {
                        _results2.push(schoolInfo.standardizedUsers[username] = {
                          id: username,
                          type: "user",
                          size: "8",
                          fill: "#000"
                        });
                      } else {
                        _results2.push(void 0);
                      }
                    }
                    return _results2;
                  })());
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        };
        console.log("Dependencies loaded");
        fixWorkInfo();
        mapUsersToSchool();
        processSchools();
        return {
          workInfo: workInfo,
          schools: schools,
          committees: committees
        };
      });
    };

    /*
    Load and cache work info
     */
    loadWorkInfo = function() {
      var defer;
      defer = $q.defer();
      $http.get("assets/json/work_info.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache committee relationships
     */
    loadCommittees = function() {
      var defer;
      defer = $q.defer();
      $http.get("assets/json/committees.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache schools
     */
    loadSchools = function() {
      var defer;
      defer = $q.defer();
      $http.get("assets/json/schools_departments.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };

    /*
    Load and cache canonical data
     */
    loadCanonical = function() {
      var defer;
      defer = $q.defer();
      $http.get("assets/json/canonical.json", {
        cache: 'true'
      }).success(function(data, status, headers, config) {
        return defer.resolve(data);
      });
      return defer.promise;
    };
    return {
      getWorkInfo: getWorkInfo,
      getSchools: loadSchools
    };
  });

}).call(this);

//# sourceMappingURL=ICCVApp.js.map
